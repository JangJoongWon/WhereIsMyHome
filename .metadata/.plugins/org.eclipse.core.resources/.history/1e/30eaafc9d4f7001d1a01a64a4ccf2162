package com.ssafy.home.controller;

import com.ssafy.home.user.model.UserDto;
import com.ssafy.home.user.model.service.UserService;

import io.swagger.annotations.Api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
<<<<<<< HEAD
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
=======
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
>>>>>>> 29231699c5f18d11fe38759c0a54c07d013de119
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpSession;

@Controller
@RequestMapping("/user")
@CrossOrigin(origins = "http://localhost:8080")
@Api("사용자 컨트롤러  API V1")
public class UserController {

	@Autowired
	private UserService userService;

<<<<<<< HEAD
//logOK

	@GetMapping("/login")
	public String login() {
		return "login/login";
	}

	@PostMapping("/login")
	@ResponseBody
	public ResponseEntity<?> login(@RequestBody UserDto userDto, HttpSession session) throws Exception {
		try {
			ResponseEntity<UserDto> entity = new ResponseEntity<UserDto>(userService.userLogin(userDto), HttpStatus.OK);

			if (entity.getBody() != null)
				session.setAttribute("logOK", entity.getBody());

			return entity;
		} catch (Exception e) {
			return new ResponseEntity<String>("서버 오류", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@GetMapping("/signup")
	public String signup() {
		return "user/signup";
	}

	@PostMapping("/signup")
	@ResponseBody
	@Transactional
	public ResponseEntity<?> signup(UserDto userDto) throws Exception{
=======
	@PostMapping("/login")
	@ResponseBody
	public ResponseEntity<?> login(@RequestBody UserDto userDto) throws Exception {
		ResponseEntity<UserDto> entity = new ResponseEntity<UserDto>(userService.userLogin(userDto), HttpStatus.OK);
		return entity;
	}


	@PostMapping("/register")
	@ResponseBody
	public ResponseEntity<?> register(@RequestBody UserDto userDto) throws Exception{
		
>>>>>>> 29231699c5f18d11fe38759c0a54c07d013de119
		try {
			return new ResponseEntity<Integer>(userService.userEnroll(userDto), HttpStatus.OK);
		}catch(Exception e) {
			return new ResponseEntity<String>("서버 오류", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
<<<<<<< HEAD

	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.removeAttribute("logOK");
		return "index";
	}

	@GetMapping("/mypage")
	public String myPage() {
		return "user/userInfo";
	}

	@PostMapping("/modify")
	@ResponseBody
	@Transactional
	public ResponseEntity<?> modify(@RequestBody UserDto userDto, HttpSession session) throws Exception{
		try {
			userService.userModify(userDto);
			session.setAttribute("logOK", userDto);
=======
	
	@PostMapping("/findById")
	public ResponseEntity<?> findById(@RequestBody String id) throws Exception {
		String check = userService.findById(id);
		if(check!=null) return new ResponseEntity<String>(check, HttpStatus.OK);
		return new ResponseEntity<String>("NO", HttpStatus.OK);
	}
	
	@PostMapping("/getUser")
	public ResponseEntity<?> getUser(@RequestBody String id) throws Exception {
		
		//0이거나 null이면 정상회원
		if(userService.getUser(id)==null||(int)userService.getUser(id)==0) {
			return new ResponseEntity<Integer>(0, HttpStatus.OK);
		}
		//1이면 탈퇴환 회원
		else return new ResponseEntity<Integer>(1, HttpStatus.OK);
	}
	

	@PutMapping("/modify")
	public ResponseEntity<?> modify(@RequestBody UserDto userDto) throws Exception{
		try {
			userService.userModify(userDto);
>>>>>>> 29231699c5f18d11fe38759c0a54c07d013de119
			return new ResponseEntity<Integer>(1, HttpStatus.OK);
		}catch(Exception e) {
			return new ResponseEntity<String>("서버 오류", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
<<<<<<< HEAD
	@GetMapping("/delete/{id}")
	@ResponseBody
	@Transactional
	public ResponseEntity<?> delete(@PathVariable(value="id") String id, HttpSession session) throws Exception{
		try {
			session.invalidate();
=======
	@PutMapping("/delete")
	public ResponseEntity<?> delete(@RequestBody String id) throws Exception{
		try {
>>>>>>> 29231699c5f18d11fe38759c0a54c07d013de119
			return new ResponseEntity<Integer>(userService.userDelete(id), HttpStatus.OK);
		}catch(Exception e) {
			return new ResponseEntity<String>("서버 오류", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}
